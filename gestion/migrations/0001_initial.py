# Generated by Django 5.2 on 2025-04-20 17:25

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Grupo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre del grupo')),
                ('descripcion', models.TextField(blank=True, verbose_name='Descripción del grupo')),
            ],
            options={
                'verbose_name': 'Grupo',
                'verbose_name_plural': 'Grupos',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('rol', models.CharField(choices=[('ALUMNO', 'Alumno'), ('ENTRENADOR', 'Entrenador'), ('ASISTENTE', 'Asistente'), ('ADMINISTRADOR', 'Administrador')], default='ALUMNO', max_length=20, verbose_name='Rol')),
                ('inactivo_desde', models.DateField(blank=True, null=True, verbose_name='Inactivo Desde')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='usuarios', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='usuarios_permissions', to='auth.permission', verbose_name='user permissions')),
                ('grupo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gestion.grupo', verbose_name='Grupo')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pago',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_pago', models.DateField(help_text='Fecha en que se realizó el pago', verbose_name='Fecha de pago')),
                ('numero_referencia', models.CharField(help_text='Identificador único de la transacción', max_length=20, unique=True, verbose_name='Número de referencia')),
                ('banco_emisor', models.CharField(choices=[('0001', '0001 - Banco Central de Venezuela'), ('0102', '0102 - Banco de Venezuela, S.A. Banco Universal'), ('0104', '0104 - Banco Venezolano de Crédito, S.A. Banco Universal'), ('0105', '0105 - Banco Mercantil C.A., Banco Universal'), ('0108', '0108 - Banco Provincial, S.A. Banco Universal'), ('0114', '0114 - Banco del Caribe C.A., Banco Universal'), ('0115', '0115 - Banco Exterior C.A., Banco Universal'), ('0128', '0128 - Banco Caroní C.A., Banco Universal'), ('0134', '0134 - Banesco Banco Universal, C.A.'), ('0137', '0137 - Banco Sofitasa Banco Universal, C.A.'), ('0138', '0138 - Banco Plaza, Banco Universal'), ('0146', '0146 - Banco de la Gente Emprendedora C.A.'), ('0151', '0151 - Banco Fondo Común, C.A Banco Universal'), ('0156', '0156 - 100% Banco, Banco Comercial, C.A'), ('0157', '0157 - DelSur, Banco Universal C.A.'), ('0163', '0163 - Banco del Tesoro C.A., Banco Universal'), ('0166', '0166 - Banco Agrícola de Venezuela C.A., Banco Universal'), ('0168', '0168 - Bancrecer S.A., Banco Microfinanciero'), ('0169', '0169 - Mi Banco, Banco Microfinanciero, C.A.'), ('0171', '0171 - Banco Activo C.A., Banco Universal'), ('0172', '0172 - Bancamiga Banco Universal, C.A.'), ('0173', '0173 - Banco Internacional de Desarrollo C.A., Banco Universal'), ('0174', '0174 - Banplus Banco Universal, C.A.'), ('0175', '0175 - Banco Bicentenario del Pueblo, Banco Universal C.A.'), ('0177', '0177 - Banco de la Fuerza Armada Nacional Bolivariana, B.U.'), ('0178', '0178 - N58 Banco Digital, Banco Microfinanciero'), ('0191', '0191 - Banco Nacional de Crédito C.A., Banco Universal'), ('0601', '0601 - Instituto Municipal de Crédito Popular')], max_length=4, verbose_name='Banco emisor')),
                ('tipo_transaccion', models.CharField(choices=[('PAGO_MOVIL', 'Pago Móvil'), ('TRANSFERENCIA', 'Transferencia Bancaria'), ('DEPOSITO', 'Depósito Bancario')], default='PAGO_MOVIL', help_text='Método usado para el pago', max_length=20, verbose_name='Tipo de transacción')),
                ('captura_comprobante', models.ImageField(blank=True, help_text='Sube una captura o foto de la transacción', null=True, upload_to='comprobantes/%Y/%m/', verbose_name='Comprobante (opcional)')),
                ('alumno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Pago',
                'verbose_name_plural': 'Pagos',
                'ordering': ['-fecha_pago', 'alumno'],
            },
        ),
        migrations.CreateModel(
            name='Asistencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(verbose_name='Fecha de la sesión')),
                ('presente', models.BooleanField(default=False, verbose_name='Asistió')),
                ('nota', models.CharField(blank=True, max_length=200, verbose_name='Comentario / Nota')),
                ('alumno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asistencias', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Registro de Asistencia',
                'verbose_name_plural': 'Registros de Asistencia',
                'ordering': ['fecha', 'alumno'],
                'unique_together': {('alumno', 'fecha')},
            },
        ),
    ]
